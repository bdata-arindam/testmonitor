Certainly! Here's a detailed README file for your program, including installation instructions and commands for installing the required libraries as a fresh install:

```markdown
# Druid Status Monitor

The Druid Status Monitor is a Python script for fetching status, memory metrics, and sending email notifications for one or more Druid clusters. It allows you to monitor the health and resource usage of Druid clusters and receive status updates via email.

## Features

- Fetches Druid router status.
- Captures memory metrics for historical and middle manager nodes.
- Sends status emails with cluster information.
- Supports multiple Druid clusters in a single email.
- Stores metrics in a database (optional).
- Configurable email notifications.
- Periodic execution and scheduling.

## Prerequisites

Before running the Druid Status Monitor, make sure you have the following prerequisites installed:

- Python 3.7+
- `pip` package manager

## Installation


2. Navigate to the project directory:

   ```bash
   cd druid-status-monitor
   ```

3. Create a virtual environment (optional but recommended):

   ```bash
   python -m venv venv
   ```

4. Activate the virtual environment:

   - On Windows:

     ```bash
     .\venv\Scripts\activate
     ```

   - On macOS and Linux:

     ```bash
     source venv/bin/activate
     ```

5. Install the required Python packages using `pip`. Run the following command to install the dependencies:

   ```bash
   pip install -r requirements.txt
   ```

This will install all the necessary libraries and dependencies for the Druid Status Monitor.

## Configuration

1. Create a `config.json` file in the project directory and configure it according to your Druid cluster settings and email preferences. You can use the provided `config.example.json` as a template.

   ```json
   {
     "cluster_name": "My Druid Cluster",
     "router_url": "https://druid-router-url.example.com",
     "smtp_user": "",
     "recipient_email": "recipient@example.com",
     "smtp_server": "smtp.example.com",
     "smtp_port": 587,
     "smtp_password": "",
     "execution_interval": 30,
     "enable_database": true,
     "database_type": "sqlite",
     "database_name": "metrics_db",
     "database_host": "localhost",
     "database_username": "db_user",
     "database_password": "db_password",
     "retry_count": 5
   }
   ```

   - Update `"cluster_name"`, `"router_url"`, `"smtp_user"`, `"recipient_email"`, `"smtp_server"`, `"smtp_port"`, `"smtp_password"`, `"database_type"`, `"database_name"`, `"database_host"`, `"database_username"`, and `"database_password"` with your specific settings.

   - Leave `"smtp_user"` and `"smtp_password"` empty if you are using a corporate portal for sending emails.

2. Create an `email_list.json` file in the project directory to specify the recipient email addresses where status emails will be sent:

   ```json
   {
     "recipients": [
       "recipient1@example.com",
       "recipient2@example.com",
       "recipient3@example.com"
     ]
   }
   ```

   - Add the email addresses of your recipients to the `"recipients"` list.

## Usage

Run the Druid Status Monitor using the following command:

```bash
python main.py
```

The program will start executing and periodically fetch Druid status, memory metrics, and send status emails based on the configured schedule and settings.

## Contributing

If you have suggestions, bug reports, or want to contribute to this project, please open an issue or create a pull request on the GitHub repository.

## License

This project is licensed under the MIT License. See the `LICENSE` file for details.
```

This README file provides installation instructions, configuration details, usage instructions, and information about contributing and licensing for your Druid Status Monitor program. You can customize it further based on your specific needs.